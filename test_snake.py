import unittest
from unittest.mock import patch
import pygame
import time
import random

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è pygame
pygame.init()

# –†–æ–∑–º—ñ—Ä–∏ –≤—ñ–∫–Ω–∞ –≥—Ä–∏
window_width = 600
window_height = 400

# –ö–æ–ª—å–æ—Ä–∏ (RGB)
black = (0, 0, 0)
white = (255, 255, 255)
green = (0, 255, 0)
red = (255, 0, 0)

# –†–æ–∑–º—ñ—Ä –±–ª–æ–∫—É –∑–º—ñ–π–∫–∏
block_size = 20

# –®–≤–∏–¥–∫—ñ—Å—Ç—å –∑–º—ñ–π–∫–∏
snake_speed = 10

# –®—Ä–∏—Ñ—Ç –¥–ª—è —Ç–µ–∫—Å—Ç—É
font_style = pygame.font.SysFont(None, 35)

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–∫–Ω–∞ –≥—Ä–∏
game_window = pygame.display.set_mode((window_width, window_height))
pygame.display.set_caption("–ó–º—ñ–π–∫–∞ –Ω–∞ Python üêç")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–º—ñ–Ω–∏ –Ω–∞–ø—Ä—è–º–∫—É –∑–º—ñ–π–∫–∏ –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –Ω–∞ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∏–π –Ω–∞–ø—Ä—è–º–æ–∫
def change_direction(current_direction, new_direction):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–º—ñ–Ω–∏ –Ω–∞–ø—Ä—è–º–∫—É –∑ –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é –Ω–∞ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–∏–π –Ω–∞–ø—Ä—è–º–æ–∫."""
    if (current_direction == 'UP' and new_direction == 'DOWN') or \
       (current_direction == 'DOWN' and new_direction == 'UP') or \
       (current_direction == 'LEFT' and new_direction == 'RIGHT') or \
       (current_direction == 'RIGHT' and new_direction == 'LEFT'):
        raise ValueError("–ù–µ–º–æ–∂–ª–∏–≤–æ —Ä—É—Ö–∞—Ç–∏—Å—å –≤ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É")
    return new_direction

class TestSnakeGame(unittest.TestCase):

    def setUp(self):
        """–ó–∞–ø—É—Å–∫–∞—î–º–æ –≥—Ä—É –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º —Ç–µ—Å—Ç–æ–º"""
        self.current_direction = 'LEFT'  # –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –Ω–∞–ø—Ä—è–º–æ–∫
        # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ mock –¥–ª—è pygame.display.set_mode() –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –±–µ–∑ –≥—Ä–∞—Ñ—ñ—á–Ω–æ–≥–æ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
        with patch("pygame.display.set_mode") as mock_set_mode:
            mock_set_mode.return_value = game_window

    def test_invalid_keypress_up_down(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∏–¥–∞—î—Ç—å—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ–º—É –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –≤–≥–æ—Ä—É —Ç–∞ –≤–Ω–∏–∑"""
        self.current_direction = change_direction(self.current_direction, 'UP')
        try:
            self.current_direction = change_direction(self.current_direction, 'DOWN')
        except ValueError as e:
            self.assertEqual(str(e), "–ù–µ–º–æ–∂–ª–∏–≤–æ —Ä—É—Ö–∞—Ç–∏—Å—å –≤ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É")
    
    def test_invalid_keypress_down_up(self):
        self.current_direction = 'RIGHT'
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∏–¥–∞—î—Ç—å—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ–º—É –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –≤–Ω–∏–∑ —Ç–∞ –≤–≥–æ—Ä—É"""
        self.current_direction = change_direction(self.current_direction, 'DOWN')
        try:
            self.current_direction = change_direction(self.current_direction, 'UP')
        except ValueError as e:
            self.assertEqual(str(e), "–ù–µ–º–æ–∂–ª–∏–≤–æ —Ä—É—Ö–∞—Ç–∏—Å—å –≤ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É")
    
    def test_invalid_keypress_left_right(self):
        self.current_direction = 'DOWN'
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∏–¥–∞—î—Ç—å—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ–º—É –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –≤–ª—ñ–≤–æ —Ç–∞ –≤–ø—Ä–∞–≤–æ"""
        self.current_direction = change_direction(self.current_direction, 'LEFT')
        try:
            self.current_direction = change_direction(self.current_direction, 'RIGHT')
        except ValueError as e:
            self.assertEqual(str(e), "–ù–µ–º–æ–∂–ª–∏–≤–æ —Ä—É—Ö–∞—Ç–∏—Å—å –≤ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É")
    
    def test_invalid_keypress_right_left(self):
        self.current_direction = 'DOWN'
        """–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∏–¥–∞—î—Ç—å—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ–º—É –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –≤–ø—Ä–∞–≤–æ —Ç–∞ –≤–ª—ñ–≤–æ"""
        self.current_direction = change_direction(self.current_direction, 'RIGHT')
        try:
            self.current_direction = change_direction(self.current_direction, 'LEFT')
        except ValueError as e:
            self.assertEqual(str(e), "–ù–µ–º–æ–∂–ª–∏–≤–æ —Ä—É—Ö–∞—Ç–∏—Å—å –≤ –ø—Ä–æ—Ç–∏–ª–µ–∂–Ω–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É")

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞—î–º–æ —Ç–µ—Å—Ç–∏ –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º verbosity –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤–∏–≤–µ–¥–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    unittest.main(verbosity=2)  
